610185E 川島拓海

final.rb 最終課題のプログラムです。
その他の添付ファイルは最終課題のためのものです。説明は後述します。
以下に説明を載せ、その下に実行結果を載せています。

今回は、路線図を念頭においたプログラムを作りました。モデルにしたのは、大阪市営地下鉄です。実家に住んでいたころよく利用していて思い入れがあり、乗り換えなどの様子も個人的にわかりやすかったためです。
特に、与えられた情報を格納して表示、取り出しをしやすいようにすることと、いわゆる「Yahoo!路線」のような、時刻表などに合わせて経路を作成するということが主になっています。
一方で、Lineクラスの対象となるファイルは一応拡張子をdatとしてはいますが、あまり路線図を表示するというようなことは目標にはしていません。というのも、路線図だと、互いの位置関係などが実際の地図を元にある程度決まっており、それを機械によって中途半端に再現するのもどうかと思ったためです。

また、手で打ち込む単純作業はなるべく減らしたかったため、作業を増やすだけでプログラム自体を作ることには特に変化を及ぼさないと判断した以下の点は簡略化しています。
・路線の数はかなり減らしました。
・電車の本数は、かなり雑です。ラッシュも深夜帯も関係なく１時間１本で走っていたりします。上りと下りで本数が違うこともあります。
・電車の駅を行き来する所要時間は、上りも下りも一緒にしています。また、駅に止まっている時間は考慮に入れていません。
・乗り換えの所要時間、駅間の時間は、ある程度現実には則っていますがこちらでテキトーに決めました。


以下、プログラムやその他のファイルの説明に入ります。
細かい作業に関するコメントはプログラム中に書いてあるので、概略をここでは説明します。

まず、拡張子がdatになっているファイルは、各路線の情報が入ったものです。
一行目から路線名、路線記号、駅番号と駅名、となっており、その下には各駅の名前と一番最初の駅からの所要時間が順番に並んでいます。駅番号は先頭の駅から順番に一つずつ大きくなっていくシステムです。なお、大阪市営地下鉄の路線は、大概11から駅番号が入っています。
また、路線記号と駅番号を組み合わせた名称が(外国人に伝える際などに)よく使われるため、駅名の代わりにM11,T23などのように駅を入力する関数がプログラム中にいくつかあります。東京にはそういう文化はあまりなさそうですが。特定の駅を示す際、手で打ち込むのでは11などから始まる駅番号、プログラム内で指定するのでは配列内の番地、というようにしています。(これが最もやりやすいためです。)以下の説明、プログラムのコメントでは、それぞれ「駅番号」「駅の番地」と使い分けています。

次に拡張子がなく、Trainとつくファイルです。これは、各路線における電車を示しています。各行に4つの数字がありますが、左から順に、始発駅の駅番号、終着駅の駅番号、始発駅を発車する時間の時、分、となっています。先にも述べましたが、この時間などはテキトーです。

そして、ファイルtransferは、乗り換えを示します。乗り換え可能駅のペアとその所要時間が各行に書かれています。

次にプログラムそのものに移ります。
Stationクラスには各駅の情報が入ります。路線や駅名、乗り換えや時刻表など。
関数としては、showBoard()があります。@boardUp,@boardDownの情報をもとに、
・電車の出る時間
・電車が当駅発かどうか(当駅発の電車なら座れるので...)
・電車がその路線の最後まで行かない場合は終着駅
を表示します。

TrainQueueクラスは、線路とセットになっているものです。路線が作られた際、その要請を受けて、その路線にどのような電車があるかをTrainとつくファイルの情報をもとに配列として入れていきます。@tUp,@tDownで、どちら向きの電車かを分けています。また、この配列は併合整列法で整列がかけられソートリストになっています。電車の早さの順に格納しています。関数としてはadd(train)があります。電車をもっと走らせたいなという場合に使います。上りと下りの本数などは気にしていないので、ここでも考慮しないことにします。

Trainクラスは、Trainとつくファイルの情報を一つずつ格納するためのものです。@speedが電車の早さを示します。TrainQueueの要請を受けて大量にオブジェクトが作られます。ここでは、<=>を定義して扱いやすいようにしています。

Lineクラスは、路線を定義するためのものです。initializeがやや面倒です。@stationsや@trainsで、駅や電車のオブジェクトを作ります。@graphは、その電車が所属する路線図です。初期値nilなのは、路線を単体で作りたいときのためです。また、駅の指定において、駅番号を番地に直したりその逆をする作業が多いので、そのためのものとして@sizeや@firstがあります。

LineGraphクラスがメインとなる部分です。@linesに複数の路線を格納した路線図となっています。ここで初めて、乗り換え情報が登録されます。connectTransがそれを請け負っています。授業でやったconnectに似ており、重みつき無向グラフとでもいうような登録方法になっています。同じ駅名ならつなぐ、みたいなのでもいいのですが、別の名前でも乗り換えができてしまう組み合わせもあるので。関数convertは、路線記号と駅番号を路線・駅の番地に直すためのものです。
trav